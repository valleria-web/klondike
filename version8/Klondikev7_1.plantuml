@startuml klondikev8

class Card {
  - suits: String
  - values: String
  - isFaceUp: Boolean
  - deck: Array[52]
  + constructor()
  + toString()
  + flip()
  + createAndShuffleDeck()
}

class Klondike {
  - stock: Stock
  - waste: Waste
  - foundation: Foundation
  - tableau: Tableau
  - stockController: StockController
  - wasteController: WasteController
  + constructor()
}

class Stock {
  - cards: Array[Card]
  + constructor()
  + populateStock() 
}

class StockRenderer {
  + static render(stock: Stock)
}

class Tableau {
  - tableaus: Array[[7]]
  + constructor(stock: Stock)
  + receiveCards(stock: Stock) 
  + distributeCards(stock: Stock)
  + canMoveCardToAnotherTableau(cardToMove: Card, destinationTableau: Tableau)
}

class TableauRenderer {
  - tableau: Tableau
  + constructor(tableau: Tableau)
  + renderTableausCards()
}

class Foundation {
  - foundations: Array[[4]]
  + constructor()
  + moveCardToFoundation(card: Card, foundationIndex)
  + isMoveToFoundationValid(card: Card, foundationPile)
  + isNextValueInFoundationInOrder(currentValue, nextValue)
}

class Waste {
  - cards: Array[Card]
  + constructor()
  + receiveCardFromStock(stock: Stock)
  + flipLastCard()
}

class WasteRenderer {
  - waste: Waste
  + constructor(waste: Waste)
  + renderWasteCards()
}

class StockController {
  - stock: Stock
  - stockView: StockRenderer
  - wasteController: WasteController
  + constructor(stock: Stock, stockView: StockRenderer, wasteController: WasteController)
  + handleStockClick(event)
  + moveCardToWaste()
}

class WasteController {
  - waste: Waste
  - wasteView: WasteRenderer
  + constructor(waste: Waste, wasteView: WasteRenderer)
  + receiveCardFromStock(card: Card)
}

Klondike "1" --> "1" Stock
Klondike "1" --> "1" Waste
Klondike "1" --> "1" Foundation
Klondike "1" --> "1" Tableau
Klondike "1" --> "1" StockController
Klondike "1" --> "1" WasteController
Stock "1" *-- "*" Card
Waste "1" *-- "*" Card
Foundation "1" *-- "*" Card
Tableau "1" *-- "*" Card
StockRenderer ..> Stock : uses
TableauRenderer ..> Tableau : uses
WasteRenderer ..> Waste : uses
StockController ..> Stock : controls
StockController ..> StockRenderer : controls
StockController ..> WasteController : controls
WasteController ..> Waste : controls
WasteController ..> WasteRenderer : controls

@enduml
